// Generated by Apple Swift version 5.2.2 effective-4.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreFoundation;
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="StoryContent",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("BridgeCustomEvent")
@interface BridgeCustomEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class NSNumber;

@interface BridgeCustomEvent (SWIFT_EXTENSION(StoryContent))
@property (nonatomic) int32_t contentId;
@property (nonatomic, copy) NSDate * _Nullable createdDate;
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, copy) NSString * _Nullable eventKey;
@property (nonatomic, copy) NSString * _Nullable eventValue;
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic) BOOL sync;
@property (nonatomic) int32_t timeZone;
@property (nonatomic, copy) NSString * _Nullable userId;
@end


SWIFT_CLASS_NAMED("BridgeMessage")
@interface BridgeMessage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end




@interface BridgeMessage (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSString * _Nullable command;
@property (nonatomic, strong) NSNumber * _Nullable contentId;
@property (nonatomic, copy) NSDate * _Nullable createdDate;
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSString * _Nullable guid;
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic) int16_t order;
@property (nonatomic, copy) NSString * _Nullable queue;
@property (nonatomic, copy) NSString * _Nullable response;
@end


SWIFT_CLASS_NAMED("BridgeSession")
@interface BridgeSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface BridgeSession (SWIFT_EXTENSION(StoryContent))
/// Returns NSmanagedObject as Dictionary [String: Any]
- (NSDictionary<NSString *, id> * _Nonnull)asDict SWIFT_WARN_UNUSED_RESULT;
@end


@interface BridgeSession (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSString * _Nullable address;
@property (nonatomic) BOOL complete;
@property (nonatomic) int64_t completeSessionDuration;
@property (nonatomic, copy) NSDate * _Nullable created;
@property (nonatomic) int64_t duration;
@property (nonatomic) int32_t lastOpenedSlideId;
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable presentationId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic) int16_t slidesCount;
@property (nonatomic) int16_t state;
@property (nonatomic) BOOL synchronized;
@property (nonatomic) int32_t timeZone;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic) BOOL isRestored;
@end


SWIFT_CLASS("_TtC12StoryContent6Client")
@interface Client : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class Presentation;
@class NSSet;

@interface Client (SWIFT_EXTENSION(StoryContent))
- (void)addPresentationsObject:(Presentation * _Nonnull)value;
- (void)removePresentationsObject:(Presentation * _Nonnull)value;
- (void)addPresentations:(NSSet * _Nonnull)values;
- (void)removePresentations:(NSSet * _Nonnull)values;
@end

@class UIImage;

@interface Client (SWIFT_EXTENSION(StoryContent))
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context SWIFT_UNAVAILABLE;
- (UIImage * _Nullable)getThumbImage SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDate;

@interface Client (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, strong) NSNumber * _Nullable clientId;
@property (nonatomic, strong) NSDate * _Nullable created;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable imgId;
@property (nonatomic, copy) NSString * _Nullable longDescription;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable shortdescription;
@property (nonatomic, strong) NSDate * _Nullable synchronized;
@property (nonatomic, copy) NSString * _Nullable thumbImgId;
@property (nonatomic, strong) NSDate * _Nullable updatedDate;
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic, copy) NSSet<Presentation *> * _Nullable presentations;
@end

typedef SWIFT_ENUM(NSInteger, ClosePresentationMode, closed) {
  ClosePresentationModeCloseDefault = 0,
  ClosePresentationModeCloseSessionComplete = 1,
  ClosePresentationModeCloseSessionTest = 2,
};


SWIFT_CLASS("_TtC12StoryContent14ContentPackage")
@interface ContentPackage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface ContentPackage (SWIFT_EXTENSION(StoryContent))
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context SWIFT_UNAVAILABLE;
+ (NSString * _Nonnull)entityName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)contentPackageIdPopertyName SWIFT_WARN_UNUSED_RESULT;
/// Returns isDownloadCanBeResumed
/// Returns true if download has been interrupted
- (BOOL)isDownloadCanBeResumed SWIFT_WARN_UNUSED_RESULT;
@end


@interface ContentPackage (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSString * _Nullable blobId;
@property (nonatomic, strong) NSNumber * _Nullable contentPackageId;
@property (nonatomic, strong) NSDate * _Nullable created;
@property (nonatomic, strong) NSNumber * _Nullable fileSize;
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, strong) NSNumber * _Nullable revision;
@property (nonatomic, strong) NSDate * _Nullable updatedDate;
@property (nonatomic, strong) Presentation * _Nullable presentation;
@end




SWIFT_CLASS_NAMED("InboundData")
@interface InboundData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class InboundDataParameter;

@interface InboundData (SWIFT_EXTENSION(StoryContent))
- (void)addParametersObject:(InboundDataParameter * _Nonnull)value;
- (void)removeParametersObject:(InboundDataParameter * _Nonnull)value;
- (void)addParameters:(NSSet * _Nonnull)values;
- (void)removeParameters:(NSSet * _Nonnull)values;
@end


@interface InboundData (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable modelId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic) BOOL synchronized;
@property (nonatomic, copy) NSString * _Nullable uri;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic) int32_t timeZone;
@property (nonatomic, copy) NSDate * _Nullable created;
@property (nonatomic) BOOL isRestored;
@property (nonatomic, strong) NSSet * _Nullable parameters;
@end


SWIFT_CLASS_NAMED("InboundDataParameter")
@interface InboundDataParameter : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface InboundDataParameter (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable value;
@property (nonatomic, strong) InboundData * _Nullable parentData;
@end

typedef SWIFT_ENUM(NSInteger, LogAction, closed) {
  LogActionOpen = 0,
  LogActionClose = 1,
  LogActionComplete = 2,
};


SWIFT_CLASS("_TtC12StoryContent9MediaFile")
@interface MediaFile : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSProgress;
enum MediaFileMIMEType : NSInteger;

@interface MediaFile (SWIFT_EXTENSION(StoryContent))
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context SWIFT_UNAVAILABLE;
- (void)loadMediaFileWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler progressHandler:(void (^ _Nonnull)(NSProgress * _Nonnull))progressHandler;
- (enum MediaFileMIMEType)MIMEType SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)sourcesFolderUrl SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)mediaFileUrl SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMediaFileExists SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)thumbnail SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)thumbnailImageWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)thumbnailPdfWithUrl:(NSURL * _Nonnull)url width:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
@end


@interface MediaFile (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSString * _Nullable blobId;
@property (nonatomic, strong) NSDate * _Nullable created;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, strong) NSNumber * _Nullable fileSize;
@property (nonatomic, strong) NSNumber * _Nullable isAvailableForSharing;
@property (nonatomic, strong) NSNumber * _Nullable mediaFileId;
@property (nonatomic, copy) NSString * _Nullable mimeType;
@property (nonatomic, strong) NSNumber * _Nullable revision;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) NSDate * _Nullable updatedDate;
@property (nonatomic, strong) Presentation * _Nullable presentation;
@end


SWIFT_CLASS("_TtC12StoryContent23MediaFileDownloadingNow")
@interface MediaFileDownloadingNow : NSObject
@property (nonatomic, readonly, strong) NSNumber * _Nonnull mediaFileId;
@property (nonatomic, readonly, strong) NSNumber * _Nonnull presentationId;
@property (nonatomic, strong) NSProgress * _Nonnull progress;
@property (nonatomic, copy) void (^ _Nullable progressHandler)(NSProgress * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MediaFileMIMEType, closed) {
  MediaFileMIMETypeAudioVideo = 0,
  MediaFileMIMETypePDF = 1,
  MediaFileMIMETypeOther = 2,
};


SWIFT_CLASS_NAMED("OutboundData")
@interface OutboundData : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class OutboundDataParameter;

@interface OutboundData (SWIFT_EXTENSION(StoryContent))
- (void)addParametersObject:(OutboundDataParameter * _Nonnull)value;
- (void)removeParametersObject:(OutboundDataParameter * _Nonnull)value;
- (void)addParameters:(NSSet * _Nonnull)values;
- (void)removeParameters:(NSSet * _Nonnull)values;
@end


@interface OutboundData (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable modelId;
@property (nonatomic, copy) NSString * _Nullable scheme;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic) BOOL synchronized;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic) int32_t timeZone;
@property (nonatomic, copy) NSDate * _Nullable created;
@property (nonatomic) BOOL isRestored;
@property (nonatomic, strong) NSSet * _Nullable parameters;
@end


SWIFT_CLASS_NAMED("OutboundDataParameter")
@interface OutboundDataParameter : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface OutboundDataParameter (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable value;
@property (nonatomic, strong) OutboundData * _Nullable parentData;
@end


SWIFT_CLASS("_TtC12StoryContent12Presentation")
@interface Presentation : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class Slide;

@interface Presentation (SWIFT_EXTENSION(StoryContent))
- (void)addSlidesObject:(Slide * _Nonnull)value;
- (void)removeSlidesObject:(Slide * _Nonnull)value;
- (void)addSlides:(NSSet * _Nonnull)values;
- (void)removeSlides:(NSSet * _Nonnull)values;
@end


@interface Presentation (SWIFT_EXTENSION(StoryContent))
- (void)addMediaFilesObject:(MediaFile * _Nonnull)value;
- (void)removeMediaFilesObject:(MediaFile * _Nonnull)value;
- (void)addMediaFiles:(NSSet * _Nonnull)values;
- (void)removeMediaFiles:(NSSet * _Nonnull)values;
@end


@interface Presentation (SWIFT_EXTENSION(StoryContent))
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context;
+ (NSString * _Nonnull)entityName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)presentationIdProperty SWIFT_WARN_UNUSED_RESULT;
/// Set openedState for current Presentation
- (void)setOpendState;
/// Set unopenedState for current Presentation
- (void)setUnopenedState;
/// Returns sturtUpSlide for current Presentation
- (Slide * _Nullable)startUpSlide SWIFT_WARN_UNUSED_RESULT;
/// Returns opened state for current Presentation
- (BOOL)isOpened SWIFT_WARN_UNUSED_RESULT;
/// Returns syncReady state for current Presentation
- (BOOL)isSyncReady SWIFT_WARN_UNUSED_RESULT;
/// Returns syncNow state for current Presentation
- (BOOL)isSyncNow SWIFT_WARN_UNUSED_RESULT;
/// Returns syncWait state for current Presentation
- (BOOL)isSyncWait SWIFT_WARN_UNUSED_RESULT;
/// Returns syncDone state for current Presentation
- (BOOL)isSyncDone SWIFT_WARN_UNUSED_RESULT;
/// Returns updateReady state for current Presentation
- (BOOL)isUpdateAvailable SWIFT_WARN_UNUSED_RESULT;
/// Returns sourcesFolderUrl for current Presentation
- (NSURL * _Nullable)sourcesFolderUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns contentSize for current Presentation
- (int64_t)contentSize SWIFT_WARN_UNUSED_RESULT;
/// Returns mediaSize for current Presentation
- (int64_t)mediaSize SWIFT_WARN_UNUSED_RESULT;
/// Total size of current Presentation
- (int64_t)totalSize SWIFT_WARN_UNUSED_RESULT;
/// Returns isContentExists for current Presentation
- (BOOL)isContentExists SWIFT_WARN_UNUSED_RESULT;
/// Check Media Files
- (void)checkMediaFilesWithCompletion:(void (^ _Nonnull)(void))completion;
@end

@class NSData;

@interface Presentation (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, strong) NSDate * _Nullable created;
@property (nonatomic, strong) NSNumber * _Nullable debugModeEnabled;
@property (nonatomic, copy) NSString * _Nullable imgId;
@property (nonatomic, copy) NSString * _Nullable longDescription;
@property (nonatomic, copy) NSString * _Nullable map;
@property (nonatomic, strong) NSNumber * _Nullable mapEnabled;
@property (nonatomic, strong) NSNumber * _Nullable mapType;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, strong) NSNumber * _Nullable needConfirmation;
@property (nonatomic, strong) NSNumber * _Nullable order;
@property (nonatomic, strong) NSNumber * _Nullable presentationId;
@property (nonatomic, strong) NSNumber * _Nullable previewMode;
@property (nonatomic, strong) NSData * _Nullable rawData;
@property (nonatomic, strong) NSNumber * _Nullable revision;
@property (nonatomic, copy) NSString * _Nullable shortdescription;
@property (nonatomic, strong) NSNumber * _Nullable skip;
@property (nonatomic, strong) NSNumber * _Nullable syncState;
@property (nonatomic, copy) NSString * _Nullable thumbImgId;
@property (nonatomic, strong) NSDate * _Nullable updatedDate;
@property (nonatomic, strong) NSNumber * _Nullable visibility;
@property (nonatomic, strong) NSNumber * _Nullable opened;
@property (nonatomic, strong) NSDate * _Nullable openedDate;
@property (nonatomic, strong) Client * _Nullable client;
@property (nonatomic, strong) ContentPackage * _Nullable contentPackage;
@property (nonatomic, copy) NSSet<MediaFile *> * _Nullable mediaFiles;
@property (nonatomic, copy) NSSet<Slide *> * _Nullable slides;
@end


SWIFT_CLASS("_TtC12StoryContent28PresentationSynchronizingNow")
@interface PresentationSynchronizingNow : NSObject
@property (nonatomic, readonly, strong) Presentation * _Nonnull presentation;
@property (nonatomic, weak) NSProgress * _Nullable contentPackageUnzipProgress;
@property (nonatomic, strong) NSProgress * _Nonnull progress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class SCLMObjcToken;
@class SCLMError;
@class NSError;

SWIFT_CLASS("_TtC12StoryContent15SCLMAuthService")
@interface SCLMAuthService : NSObject
/// Shared
/// Allows to get access point to the instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMAuthService * _Nonnull shared;)
+ (SCLMAuthService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) SCLMObjcToken * _Nullable objcToken;
/// Logout handler
/// Will be invoked after call logout() method
/// note:
/// Set it up in AppDelegate or in RootWireframe to handle logout and route to LoginViewController for instance
@property (nonatomic, copy) void (^ _Nullable logoutHandler)(void);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Client Identifier
/// Setup the Client Identifier
/// note:
///
/// \param clientId Get it from from admin.storyclm.com integration page.
///
- (void)setClientId:(NSString * _Nonnull)clientId;
/// Client Secret
/// Setup the Client Secret
/// note:
///
/// \param clientSecret Get it from from admin.storyclm.com integration page.
///
- (void)setClientSecret:(NSString * _Nonnull)clientSecret;
/// Application Identifier
/// Setup the Application Identifier
/// note:
///
/// \param appId Get it from from admin.storyclm.com integration page.
///
- (void)setAppId:(NSString * _Nonnull)appId;
/// Appliction Secret
/// Setup the Appliction Secret
/// note:
///
/// \param appSecret Get it from from admin.storyclm.com integration page.
///
- (void)setAppSecret:(NSString * _Nonnull)appSecret;
/// Endpoint
/// Setup the Endpoint
/// note:
///
/// \param authEndpoint Get it from from admin.storyclm.com integration page.
///
- (void)setAuthEndpoint:(NSString * _Nonnull)authEndpoint;
/// Timeout Interval
/// Setup the Timeout Interval
/// note:
/// Used in network requests
/// \param timeoutInterval 120 is by default
///
- (void)setTimeoutInterval:(NSTimeInterval)timeoutInterval;
/// Service authentification
/// To get access to Users API, you have to be authenticated as Service first.
/// note:
///
/// <ul>
///   <li>
///     setClientId and setClientSecret should be invoked before this method
///   </li>
/// </ul>
- (void)authAsServiceWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Application authentification with username and password
/// You should setup appId, appSecret, clientId, clientSectret to use this method
/// note:
///
/// \param username Email or Phone.
///
/// \param password Password.
///
///
/// returns:
/// SCLMToken
- (void)loginWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password success:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(SCLMError * _Nonnull))failure;
/// Logout
/// Set token to nil and invoke logoutHandler
- (void)logout;
- (void)objcRefreshCredentialsWithSuccess:(void (^ _Nonnull)(void))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


SWIFT_PROTOCOL("_TtP12StoryContent17SCLMBatchLoadable_")
@protocol SCLMBatchLoadable
@property (nonatomic, readonly) CGSize preferredSize;
- (void)startLoading;
- (void)stopLoading;
@end

@class NSCoder;

SWIFT_CLASS("_TtC12StoryContent19SCLMBatchLoaderView")
@interface SCLMBatchLoaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface SCLMBatchLoaderView (SWIFT_EXTENSION(StoryContent)) <SCLMBatchLoadable>
@property (nonatomic, readonly) CGSize preferredSize;
- (void)startLoading;
- (void)stopLoading;
@end

@class UIButton;
@class SCLMBatchLoadingViewModel;

SWIFT_CLASS("_TtC12StoryContent20SCLMBatchLoadingView")
@interface SCLMBatchLoadingView : UIView
@property (nonatomic, strong) UIView <SCLMBatchLoadable> * _Nullable loader;
@property (nonatomic, readonly, strong) UIButton * _Nonnull closeButton;
@property (nonatomic, strong) SCLMBatchLoadingViewModel * _Nonnull viewModel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)increaseProgressText;
- (void)setProgressWithCurrent:(NSInteger)current total:(NSInteger)total;
- (void)updateProgressText;
- (void)setProgressText:(NSString * _Nullable)text;
- (void)setLoadingText:(NSString * _Nullable)text;
- (void)updateAppearance;
- (void)updateLabelAppearance;
@end

@class UITraitCollection;
@class NSBundle;

SWIFT_CLASS("_TtC12StoryContent30SCLMBatchLoadingViewController")
@interface SCLMBatchLoadingViewController : UIViewController
/// Число попыток загрузки презентации при ошибке
/// <ul>
///   <li>
///     Значение по умолчанию: 2
///   </li>
/// </ul>
@property (nonatomic) NSInteger maximumFailCount;
/// Вызывается при закрытии контроллера
/// note:
/// Параметры:
/// <ul>
///   <li>
///     Bool: <em>true</em> - если все презентации загружены успешно, иначе <em>false</em>
///   </li>
///   <li>
///     [Int]: Id перезнтации, которые загрузились с ошибкой
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable onDismiss)(BOOL, NSArray<NSNumber *> * _Nonnull);
- (void)viewDidLoad;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@property (nonatomic, strong) SCLMBatchLoadingViewModel * _Nonnull viewModel;
/// Показывает <em>SCLMBatchLoadingViewController</em> модально на <em>viewController</em>
/// note:
/// Устанавливает свойство <em>modalPresentationStyle</em> в <em>.fullScreen</em>
/// warning:
/// Данный метод не начинает загрузку презентаций при появлении, для этого испульзуйте метод <code>startLoading</code> класса <em>SCLMBatchLoadingManager</em>
/// \param viewController контроллер для отображения <em>SCLMBatchLoadingViewController</em>
///
/// \param completion возвращается при показе <em>SCLMBatchLoadingViewController</em> на <em>viewController</em>
///
- (void)presentOn:(UIViewController * _Nonnull)viewController completion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIColor;
@class LabelViewModel;
@class ButtonViewModel;

SWIFT_CLASS("_TtC12StoryContent25SCLMBatchLoadingViewModel")
@interface SCLMBatchLoadingViewModel : NSObject
@property (nonatomic, strong) UIView <SCLMBatchLoadable> * _Nullable loader;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull loaderColor;
@property (nonatomic) BOOL isShowLoadingLabel;
@property (nonatomic, strong) LabelViewModel * _Nonnull titleViewModel;
@property (nonatomic, strong) LabelViewModel * _Nonnull subtitleViewModel;
@property (nonatomic, strong) LabelViewModel * _Nonnull progressViewModel;
@property (nonatomic, strong) LabelViewModel * _Nonnull currentLoadingViewModel;
@property (nonatomic, strong) ButtonViewModel * _Nonnull cancelButtonViewModel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SCLMBridgeProtocol;
@class SCLMBridgeSessions;
@class SCLMBridgeModule;

SWIFT_CLASS("_TtC12StoryContent10SCLMBridge")
@interface SCLMBridge : NSObject
@property (nonatomic, weak) id <SCLMBridgeProtocol> _Nullable delegate;
@property (nonatomic, readonly, strong) SCLMBridgeSessions * _Nonnull sessions;
- (void)handleJavaScriptRequest;
- (void)subscribeWithModule:(SCLMBridgeModule * _Nonnull)module_ toCommands:(NSArray<NSString *> * _Nonnull)commands;
- (void)addBridgeModule:(SCLMBridgeModule * _Nonnull)module_;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP12StoryContent28SCLMBridgeBaseModuleProtocol_")
@protocol SCLMBridgeBaseModuleProtocol
- (void)goToSlide:(Slide * _Nonnull)slide with:(id _Nonnull)data;
- (id _Nonnull)getNavigationData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP12StoryContent36SCLMBridgeCustomEventsModuleProtocol_")
@protocol SCLMBridgeCustomEventsModuleProtocol
- (void)setEventKey:(NSString * _Nonnull)key and:(id _Nonnull)value;
@end


SWIFT_PROTOCOL("_TtP12StoryContent27SCLMBridgeMapModuleProtocol_")
@protocol SCLMBridgeMapModuleProtocol
- (void)hideMapBtn;
- (void)showMapBtn;
@end


SWIFT_PROTOCOL("_TtP12StoryContent34SCLMBridgeMediaFilesModuleProtocol_")
@protocol SCLMBridgeMediaFilesModuleProtocol
- (void)openMediaFile:(NSString * _Nonnull)fileName;
- (void)openMediaLibrary;
- (void)showMediaLibraryBtn;
- (void)hideMediaLibraryBtn;
@end


SWIFT_CLASS("_TtC12StoryContent17SCLMBridgeMessage")
@interface SCLMBridgeMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull guid;
@property (nonatomic, readonly, copy) NSString * _Nonnull command;
@property (nonatomic, readonly) id _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull response;
@property (nonatomic, readonly) NSInteger processingCounter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12StoryContent16SCLMBridgeModule")
@interface SCLMBridgeModule : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_PROTOCOL("_TtP12StoryContent36SCLMBridgePresentationModuleProtocol_")
@protocol SCLMBridgePresentationModuleProtocol
- (void)openPresentation:(Presentation * _Nonnull)presentation with:(NSString * _Nullable)slideName and:(id _Nullable)data;
- (Slide * _Nullable)getPreviousSlide SWIFT_WARN_UNUSED_RESULT;
- (Slide * _Nullable)getNextSlide SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getCurrentSlideName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)getBackForwardList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<Presentation *> * _Nullable)getBackForwardPresList SWIFT_WARN_UNUSED_RESULT;
- (void)closePresentationWithMode:(enum ClosePresentationMode)mode;
@end


SWIFT_PROTOCOL("_TtP12StoryContent18SCLMBridgeProtocol_")
@protocol SCLMBridgeProtocol
@end


SWIFT_CLASS("_TtC12StoryContent18SCLMBridgeResponse")
@interface SCLMBridgeResponse : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SCLMDeepLinkInboundData;
@class SCLMDeepLinkOutboundData;
@class SCLMDeepLink;

SWIFT_CLASS("_TtC12StoryContent17SCLMBridgeSession")
@interface SCLMBridgeSession : NSObject
/// sessionId  - Идентификатор сессии Guid (UUID). Строка. Уникальный ключ. Генерируется на стороне клиента. Создается при открытии презентации;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// InboundData - объект который создается на основе входящих параметров при старте сессии и привязывается ней.
@property (nonatomic, readonly, strong) SCLMDeepLinkInboundData * _Nullable deepLinkInboundData;
@property (nonatomic, readonly, strong) SCLMDeepLinkOutboundData * _Nullable deepLinkOutboundData;
- (void)initDeepLinking:(SCLMDeepLink * _Nullable)deepLink SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum SessionState : NSInteger;

SWIFT_CLASS("_TtC12StoryContent18SCLMBridgeSessions")
@interface SCLMBridgeSessions : NSObject
@property (nonatomic, readonly, strong) SCLMBridgeSession * _Nonnull session;
@property (nonatomic) BOOL isOutboundDataWithSessionInfo;
- (void)addNewSession;
- (void)createNewSessionForPresentation:(Presentation * _Nonnull)presentation;
- (void)restoreUnfinishedSession;
- (void)deleteCurrentSession;
- (void)updateStateForCurrentSessionWithState:(enum SessionState)state;
- (void)updateStateForSessionWithSessionId:(NSString * _Nonnull)sessionId state:(enum SessionState)state;
- (void)closeSessionWithAction:(enum LogAction)action state:(enum SessionState)state;
- (void)incrementSlidesCountForCurrentSession;
- (void)updateSlidesForCurrentSessionWithSlide:(Slide * _Nonnull)slide duration:(CFTimeInterval)duration;
- (void)setSessionComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SCLMBridgeSessions (SWIFT_EXTENSION(StoryContent))
- (void)updateOutboundDataWithSessionInfo;
- (void)markDeeplinkDataAsSyncable;
@end


SWIFT_PROTOCOL("_TtP12StoryContent32SCLMBridgeSessionsModuleProtocol_")
@protocol SCLMBridgeSessionsModuleProtocol
- (void)setSessionComplete;
@end

@class User;
@class SessionAction;
@class SessionEventAction;

SWIFT_CLASS("_TtC12StoryContent17SCLMBridgeStorage")
@interface SCLMBridgeStorage : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSArray<BridgeSession *> * _Nullable)findFinishedNotSynchronizedSessionsWithUser:(User * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
- (NSArray<BridgeSession *> * _Nullable)findFinishedNotSynchronizedSessions SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SessionAction *> * _Nullable)findNotSynchronizedSessionActionsWithUser:(User * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SessionAction *> * _Nullable)findNotSynchronizedSessionActions SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SessionEventAction *> * _Nullable)findNotSynchronizedSessionEventActionsWithUser:(User * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SessionEventAction *> * _Nullable)findNotSynchronizedSessionEventActions SWIFT_WARN_UNUSED_RESULT;
- (void)setSessionAddressWithSessionId:(NSString * _Nonnull)sessionId address:(NSString * _Nullable)address;
- (void)setSessionSynchronizedWithSessionId:(NSString * _Nonnull)sessionId;
- (void)setSessionActionSynchronizedWithSessionActionId:(NSString * _Nonnull)id;
- (void)setSessionEventActionSynchronizedWithSessionEventActionId:(NSString * _Nonnull)id;
- (void)saveContext;
@end


SWIFT_PROTOCOL("_TtP12StoryContent26SCLMBridgeUIModuleProtocol_")
@protocol SCLMBridgeUIModuleProtocol
- (void)hideCloseBtn;
- (void)hideSystemBtns;
@end


SWIFT_CLASS("_TtC12StoryContent19SCLMCoreDataManager")
@interface SCLMCoreDataManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMCoreDataManager * _Nonnull shared;)
+ (SCLMCoreDataManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (User * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
- (void)saveContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12StoryContent17SCLMDateFormatter")
@interface SCLMDateFormatter : NSObject
+ (NSString * _Nullable)serverTimeStringFrom:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12StoryContent12SCLMDeepLink")
@interface SCLMDeepLink : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12StoryContent23SCLMDeepLinkDataStorage")
@interface SCLMDeepLinkDataStorage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMDeepLinkDataStorage * _Nonnull instance;)
+ (SCLMDeepLinkDataStorage * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (InboundData * _Nullable)inboundDataWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (InboundData * _Nullable)inboundDataWithSessionId:(NSString * _Nonnull)sessionId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<InboundData *> * _Nullable)notSynchronizedInboundDataWithUser:(User * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
- (NSArray<InboundData *> * _Nullable)notSynchronizedInboundData SWIFT_WARN_UNUSED_RESULT;
- (void)setInboundDataSynchronizedWith:(NSString * _Nullable)dataId;
- (OutboundData * _Nullable)outboundDataWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (OutboundData * _Nullable)outboundDataWithSessionId:(NSString * _Nonnull)sessionId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<OutboundData *> * _Nullable)notSynchronizedOutboundDataWithUser:(User * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
- (NSArray<OutboundData *> * _Nullable)notSynchronizedOutboundData SWIFT_WARN_UNUSED_RESULT;
- (void)setOutboundDataSynchronizedWith:(NSString * _Nullable)dataId;
- (void)saveContext;
@end


SWIFT_CLASS("_TtC12StoryContent23SCLMDeepLinkInboundData")
@interface SCLMDeepLinkInboundData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC12StoryContent24SCLMDeepLinkOutboundData")
@interface SCLMDeepLinkOutboundData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable sessionId;
@property (nonatomic, readonly, copy) NSString * _Nullable scheme;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull params;
- (NSString * _Nullable)resultString SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)resultURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SCLMDeepLinkOutboundData (SWIFT_EXTENSION(StoryContent))
+ (NSString * _Nullable)tryToCreateScheme:(NSString * _Nullable)scheme SWIFT_WARN_UNUSED_RESULT;
@end


@interface SCLMDeepLinkOutboundData (SWIFT_EXTENSION(StoryContent))
- (NSDictionary<NSString *, id> * _Nonnull)asDictionary SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS("_TtC12StoryContent22SCLMDeepLinkingManager")
@interface SCLMDeepLinkingManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMDeepLinkingManager * _Nonnull shared;)
+ (SCLMDeepLinkingManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull scheme;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)handleURL:(NSURL * _Nonnull)url source:(NSString * _Nullable)source;
@end

enum SCLMErrorType : NSInteger;

SWIFT_CLASS("_TtC12StoryContent9SCLMError")
@interface SCLMError : NSError
+ (SCLMError * _Nonnull)makeWithDescription:(NSString * _Nonnull)description reason:(NSString * _Nullable)reason SWIFT_WARN_UNUSED_RESULT;
+ (SCLMError * _Nonnull)makeWithCode:(NSInteger)code description:(NSString * _Nonnull)description reason:(NSString * _Nullable)reason SWIFT_WARN_UNUSED_RESULT;
+ (SCLMError * _Nonnull)makeWithType:(enum SCLMErrorType)type SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCancelledType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isOfflineType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAuthorizationType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SCLMErrorType, closed) {
  SCLMErrorTypeCancelled = -999,
  SCLMErrorTypeOffline = -2000,
  SCLMErrorTypeAuthorization = -3000,
};

@class CLLocation;
@protocol SCLMLocationManagerDelegate;

SWIFT_CLASS("_TtC12StoryContent19SCLMLocationManager")
@interface SCLMLocationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMLocationManager * _Nonnull shared;)
+ (SCLMLocationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CLLocation * _Nullable location;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (BOOL)locationServicesEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)addressFor:(CLLocationCoordinate2D)coordinate completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (void)addressWithIsForced:(BOOL)isForced completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (void)addDelegate:(id <SCLMLocationManagerDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <SCLMLocationManagerDelegate> _Nonnull)delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;

@interface SCLMLocationManager (SWIFT_EXTENSION(StoryContent)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


SWIFT_PROTOCOL("_TtP12StoryContent27SCLMLocationManagerDelegate_")
@protocol SCLMLocationManagerDelegate
@optional
- (void)locationServicesDisabledWithManager:(SCLMLocationManager * _Nonnull)manager;
- (void)authorizationStatusNoAccessWithManager:(SCLMLocationManager * _Nonnull)manager;
- (void)authorizationStatusAccessGrantedWithManager:(SCLMLocationManager * _Nonnull)manager;
@end


SWIFT_CLASS("_TtC12StoryContent13SCLMObjcToken")
@interface SCLMObjcToken : NSObject
@property (nonatomic, copy) NSString * _Nullable access_token;
@property (nonatomic, readonly, copy) NSString * _Nullable refresh_token;
@property (nonatomic, readonly, copy) NSString * _Nullable token_type;
@property (nonatomic, readonly, strong) NSNumber * _Nullable expires_in;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12StoryContent15SCLMSyncManager")
@interface SCLMSyncManager : NSObject
/// Shared
/// Allows to get access point to the instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMSyncManager * _Nonnull shared;)
+ (SCLMSyncManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// NSManagedObjectContext
/// Returns viewContext of persistentContainer
@property (nonatomic, readonly, strong) NSManagedObjectContext * _Nonnull context;
/// FetchedResultsController with sectionNameKeyPath as “client.name”
/// Returns [Presentation] groupped and sorted by sections with sectionNameKeyPath: “client.name”
/// note:
///
///
/// returns:
/// NSFetchedResultsController
@property (nonatomic, strong) NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull fetchedResultsController;
/// FetchedResultsController without sectionNameKeyPath
/// Returns [Presentation] without groupping by sections
/// note:
///
///
/// returns:
/// NSFetchedResultsController
@property (nonatomic, strong) NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull fetchedResultsControllerSectionLess;
@property (nonatomic, strong) NSFetchedResultsController<id <NSFetchRequestResult>> * _Nonnull fetchedResultsControllerInvisible;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Synchronize Clients
/// Synchronize Clients and all included data - Presentations, Slides, ContentPackages, MediaFiles
/// note:
///
///
/// returns:
/// SCLMError
- (void)synchronizeClientsWithCompletionHandler:(void (^ _Nonnull)(SCLMError * _Nullable))completionHandler;
/// Synchronize Presentation
/// Synchronize Presentation in case it has update
/// note:
///
///
/// returns:
/// SCLMError
- (void)synchronizePresentation:(Presentation * _Nonnull)presentation completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler progressHandler:(void (^ _Nonnull)(NSProgress * _Nonnull))progressHandler psnHandler:(void (^ _Nullable)(PresentationSynchronizingNow * _Nonnull))psnHandler;
/// Delete Presentation’s ContentPackage from disk
/// ContentPackage is a major data stored on disk. Here you can delete it.
/// note:
///
/// \param presentation Presentation to delete
///
- (void)deletePresentationContentPackage:(Presentation * _Nonnull)presentation;
/// Update Presentation in case it has update
/// Update Presentation and all included data - Slides, ContentPackage, MediaFiles
/// note:
///
/// \param presentation Presentation to update
///
- (void)updatePresentation:(Presentation * _Nonnull)presentation completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Cancel Synchronize Presentation
/// Cancel synchronize presentation if required
/// note:
///
/// \param presentation Presentation to update
///
- (void)cancelSynchronizePresentation:(Presentation * _Nonnull)presentation;
/// Removes all data from CoreData and all data from disk if internet reachable
/// \param completionHandler Result callback
///
/// \param success If internet isn’t reachable or if some content can’t be deleted returns false, otherwise true
///
- (void)resetContentWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Removes all data from CoreData and all data from disk
/// \param isIgnoreInternetReachable If true - ignore internet reachability checking
///
/// \param completionHandler Result callback
///
/// \param success If internet isn’t reachable (when <em>isIgnoreInternetReachable</em> is false) or if some content can’t be deleted returns false, otherwise true
///
- (void)resetContentWithIsIgnoreInternetReachable:(BOOL)isIgnoreInternetReachable completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Returns User object
/// Returns last logged user
/// note:
///
///
/// returns:
/// User
- (User * _Nullable)getUser SWIFT_WARN_UNUSED_RESULT;
/// Returns all Clients
/// Returns all Clients
/// note:
///
///
/// returns:
/// [Client]?
- (NSArray<Client *> * _Nullable)getClients SWIFT_WARN_UNUSED_RESULT;
/// Returns Client by Id
/// Returns specified Client
/// note:
///
/// \param id Client Identifier
///
///
/// returns:
/// Client?
- (Client * _Nullable)getClientWithId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Returns Presentation by Id
/// Returns specified Presentation
/// note:
///
/// \param id Presentation Identifier
///
///
/// returns:
/// Presentation?
- (Presentation * _Nullable)getPresentationWithId:(NSInteger)id SWIFT_WARN_UNUSED_RESULT;
/// Returns Presentation by Name
/// Returns specified Presentation
/// note:
///
/// \param name Presentation Name
///
///
/// returns:
/// Presentation?
- (Presentation * _Nullable)getPresentationWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Returns Slide by Id
/// Returns specified Slide
/// note:
///
/// \param id Slide Identifier
///
///
/// returns:
/// Slide?
- (Slide * _Nullable)getSlideWithId:(int32_t)id SWIFT_WARN_UNUSED_RESULT;
/// Returns Slide by Name
/// Returns specified Slide
/// note:
///
/// \param name Slide Name
///
///
/// returns:
/// Slide?
- (Slide * _Nullable)getSlideWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Save Coredata Context
/// Please, use this method carefully, don’t invoke it too many times on a short period of time
/// note:
///
- (void)saveContext;
/// Returns object if Presentation is synchronizing now
/// For updating UI when data is synchronizing now
/// note:
///
- (PresentationSynchronizingNow * _Nullable)isPresentationSynchronizingNowWithPresentation:(Presentation * _Nonnull)presentation SWIFT_WARN_UNUSED_RESULT;
/// Returns true if now is synchronizing presentation with map enabled and thumbnails operation processing
/// Beacause thumbnails are creating by WebView on main thread, use it to avoid prevent several presentation synchronizing with thumbs at the same time
- (BOOL)isPresentationSynchronizingNowWithThumbsCreation SWIFT_WARN_UNUSED_RESULT;
/// Set <code>opened</code> to false and <code>openedDate</code> to nil for all presentations
- (void)resetAllOpenedState;
/// Returns object if MediaFile is downloading now
/// For updating UI when data is downloading now
/// note:
///
- (MediaFileDownloadingNow * _Nullable)isMediaFileDownloadingNowWithMediaFileId:(NSNumber * _Nullable)mediaFileId presentationId:(NSNumber * _Nullable)presentationId SWIFT_WARN_UNUSED_RESULT;
@end

@class SCLMUser;

SWIFT_CLASS("_TtC12StoryContent15SCLMSyncService")
@interface SCLMSyncService : NSObject
/// Shared
/// Allows to get access point to the instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SCLMSyncService * _Nonnull shared;)
+ (SCLMSyncService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Endpoint
/// Setup the Endpoint
/// note:
///
/// \param authEndpoint Get it from from admin.storyclm.com integration page.
///
- (void)setApiEndpoint:(NSString * _Nonnull)endPoint;
/// Timeout Interval
/// Setup the Timeout Interval
/// note:
/// Used in network requests
/// \param timeoutInterval 120 is by default
///
- (void)setTimeoutInterval:(NSTimeInterval)timeoutInterval;
- (void)objcCheckUserExistsWithUserName:(NSString * _Nonnull)userName success:(void (^ _Nonnull)(SCLMUser * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
@end


SWIFT_CLASS("_TtC12StoryContent8SCLMUser")
@interface SCLMUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable password;
@property (nonatomic, readonly, copy) NSString * _Nullable username;
@property (nonatomic, readonly, copy) NSString * _Nullable email;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable location;
@property (nonatomic, readonly, copy) NSString * _Nullable birthDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class WKNavigation;
@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC12StoryContent11SCLMWebView")
@interface SCLMWebView : WKWebView <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;
enum SLWebViewNavigationType : NSInteger;

SWIFT_PROTOCOL("_TtP12StoryContent19SCLMWebViewProtocol_")
@protocol SCLMWebViewProtocol
- (void)webViewDidStartLoadWithWebView:(SCLMWebView * _Nonnull)webView;
- (void)webViewDidFinishLoadWithWebView:(SCLMWebView * _Nonnull)webView;
- (void)webView:(SCLMWebView * _Nonnull)webView didFailLoadWith:(NSError * _Nonnull)error;
- (BOOL)webView:(SCLMWebView * _Nonnull)webView shouldStartLoadWith:(NSURLRequest * _Nonnull)request navigationType:(enum SLWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, SLWebViewNavigationType, closed) {
  SLWebViewNavigationTypeLinkCliked = 0,
  SLWebViewNavigationTypeFormSubmitted = 1,
  SLWebViewNavigationTypeBackForward = 2,
  SLWebViewNavigationTypeReload = 3,
  SLWebViewNavigationTypeFormresubmitted = 4,
  SLWebViewNavigationTypeOther = 5,
};


SWIFT_CLASS_NAMED("SessionAction")
@interface SessionAction : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SessionAction (SWIFT_EXTENSION(StoryContent))
/// Returns NSmanagedObject as Dictionary [String: Any]
- (NSDictionary<NSString *, id> * _Nonnull)asDict SWIFT_WARN_UNUSED_RESULT;
@end


@interface SessionAction (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSDate * _Nullable created;
@property (nonatomic) int64_t duration;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable navigation;
@property (nonatomic, copy) NSString * _Nullable presentationId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable slideId;
@property (nonatomic, copy) NSString * _Nullable slideName;
@property (nonatomic) BOOL synchronized;
@property (nonatomic) int32_t timeZone;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic) BOOL isRestored;
@end


SWIFT_CLASS_NAMED("SessionEventAction")
@interface SessionEventAction : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface SessionEventAction (SWIFT_EXTENSION(StoryContent))
/// Returns NSmanagedObject as Dictionary [String: Any]
- (NSDictionary<NSString *, id> * _Nonnull)asDict SWIFT_WARN_UNUSED_RESULT;
@end


@interface SessionEventAction (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, copy) NSDate * _Nullable created;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable key;
@property (nonatomic, strong) NSNumber * _Nullable latitude;
@property (nonatomic, strong) NSNumber * _Nullable longitude;
@property (nonatomic, copy) NSString * _Nullable presentationId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic) BOOL synchronized;
@property (nonatomic) int32_t timeZone;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable value;
@property (nonatomic) BOOL isRestored;
@end


SWIFT_CLASS("_TtC12StoryContent12SessionSlide")
@interface SessionSlide : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SessionState, closed) {
  SessionStateIsInProcess = 0,
  SessionStateIsComplete = 1,
  SessionStateIsTest = 2,
  SessionStateIsLeaveViaJs = 3,
  SessionStateIsLeaveViaDeepLink = 4,
};


SWIFT_CLASS("_TtC12StoryContent5Slide")
@interface Slide : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface Slide (SWIFT_EXTENSION(StoryContent))
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context;
+ (NSString * _Nonnull)entityName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)slideIdPopertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkThumbImageExists SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkHtmlExists SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFileNotEmptyAtUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)getThumbImageUrl SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)getPreviewImageUrl SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)createdString SWIFT_WARN_UNUSED_RESULT;
@end


@interface Slide (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, strong) NSDate * _Nullable created;
@property (nonatomic, copy) NSString * _Nullable linkedSlides;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable pageSource;
@property (nonatomic, strong) NSNumber * _Nullable revision;
@property (nonatomic, strong) NSNumber * _Nullable slideId;
@property (nonatomic, copy) NSString * _Nullable swipeNext;
@property (nonatomic, copy) NSString * _Nullable swipePrevious;
@property (nonatomic, strong) NSDate * _Nullable updatedDate;
@property (nonatomic, strong) Presentation * _Nullable presentation;
@end

@class SplitQueryItems;

SWIFT_CLASS("_TtC12StoryContent10URIManager")
@interface URIManager : NSObject
+ (NSURLComponents * _Nullable)buildComponentsWithRaw:(NSString * _Nonnull)raw singleParameters:(NSArray<NSString *> * _Nullable)singleParameters queue:(NSDictionary<NSString *, NSString *> * _Nullable)queue SWIFT_WARN_UNUSED_RESULT;
+ (SplitQueryItems * _Nullable)splitQueryItems:(NSArray<NSURLQueryItem *> * _Nullable)items SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtCC12StoryContent10URIManager15SplitQueryItems")
@interface SplitQueryItems : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12StoryContent4User")
@interface User : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface User (SWIFT_EXTENSION(StoryContent))
@property (nonatomic, strong) NSDate * _Nullable birthDate;
@property (nonatomic, strong) NSNumber * _Nullable code;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, strong) NSNumber * _Nullable gender;
@property (nonatomic, copy) NSString * _Nullable location;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable fullName;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable userId;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
