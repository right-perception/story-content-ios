// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name StoryContent
import AVFoundation
import Alamofire
import CommonCrypto
import CoreData
import CoreLocation
import Foundation
import Kingfisher
import PDFKit
@_exported import StoryContent
import Swift
import UIKit
import WebKit
import ZIPFoundation
extension FileManager {
  public static var documentDirUrl: Foundation.URL {
    get
  }
  public static var contentDirUrl: Foundation.URL {
    get
  }
  public static var cacheDirUrl: Foundation.URL {
    get
  }
  public static var sourcesDirUrl: Foundation.URL {
    get
  }
  public static var thumbsDirUrl: Foundation.URL {
    get
  }
  public static var mediaFilesDirUrl: Foundation.URL {
    get
  }
  public static var logsFilesDirUrl: Foundation.URL {
    get
  }
  public func deviceRemainingFreeSpaceInBytes() -> Swift.Int64?
  public class func removeFile(filePath: Swift.String) -> Swift.Bool
  public class func removeFolderIfExists(at url: Foundation.URL) -> Swift.Bool
  public class func removeAllStoryContentFolders() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class Slide : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Client {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.Client>
  @objc @NSManaged dynamic public var clientId: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var created: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var email: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var imgId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longDescription: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var shortdescription: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synchronized: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var thumbImgId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var updatedDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var url: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentations: Swift.Set<StoryContent.Presentation>? {
    @objc get
    @objc set(value)
  }
}
extension Client {
  @objc(addPresentationsObject:) @NSManaged dynamic public func addToPresentations(_ value: StoryContent.Presentation)
  @objc(removePresentationsObject:) @NSManaged dynamic public func removeFromPresentations(_ value: StoryContent.Presentation)
  @objc(addPresentations:) @NSManaged dynamic public func addToPresentations(_ values: Foundation.NSSet)
  @objc(removePresentations:) @NSManaged dynamic public func removeFromPresentations(_ values: Foundation.NSSet)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMAuthService : ObjectiveC.NSObject {
  public struct PasswordReloginResult {
    public init(login: Swift.String, password: Swift.String)
  }
  @objc public static var shared: StoryContent.SCLMAuthService
  public var token: StoryContent.SCLMToken? {
    get
  }
  @objc public var objcToken: StoryContent.SCLMObjcToken? {
    @objc get
  }
  @objc public var logoutHandler: (() -> Swift.Void)?
  public var reloginHandler: (() -> StoryContent.SCLMAuthService.PasswordReloginResult?)?
  @objc public func setClientId(_ clientId: Swift.String)
  @objc public func setClientSecret(_ clientSecret: Swift.String)
  @objc public func setAppId(_ appId: Swift.String)
  @objc public func setAppSecret(_ appSecret: Swift.String)
  @objc public func setAuthEndpoint(_ authEndpoint: Swift.String)
  @objc public func setTimeoutInterval(_ timeoutInterval: Foundation.TimeInterval)
  @objc public func authAsService(success: @escaping () -> Swift.Void, failure: @escaping (StoryContent.SCLMError) -> Swift.Void)
  @objc public func auth(username: Swift.String, password: Swift.String, success: @escaping () -> Swift.Void, failure: @escaping (StoryContent.SCLMError) -> Swift.Void)
  @objc public func logout()
  @objc public func refreshCredentials(success: @escaping () -> Swift.Void, failure: @escaping (StoryContent.SCLMError) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ContentPackage : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMDeepLinkingManager : ObjectiveC.NSObject {
  @objc public static var shared: StoryContent.SCLMDeepLinkingManager
  @objc public var deepLink: StoryContent.SCLMDeepLink?
  @objc public var scheme: Swift.String {
    get
  }
  @objc public func handleURL(_ url: Foundation.URL, source: Swift.String? = nil)
  @objc deinit
}
@objc public class SCLMDeepLinkInboundData : ObjectiveC.NSObject {
  public init(sessionId: Swift.String?, source: Swift.String?, url: Swift.String?, params: [Swift.String : Swift.String]?)
  @objc deinit
  @objc override dynamic public init()
}
extension SCLMDeepLinkInboundData {
  public func asDictionary() -> [Swift.String : Any]
}
@objc public protocol SCLMBatchCancelable {
  @objc func cancelLoading()
}
extension SessionEventAction {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.SessionEventAction>
  @objc @NSManaged dynamic public var created: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentationId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synchronized: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timeZone: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isRestored: Swift.Bool {
    @objc get
    @objc set(value)
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMParallelBatchLoadingManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func addBatchLoadable(delegate: StoryContent.SCLMBatchLoadingManagerDelegate)
  @objc public func addPresentations(_ presentations: [StoryContent.Presentation])
  @objc public func startLoading()
  @objc deinit
}
extension SCLMParallelBatchLoadingManager : StoryContent.SCLMBatchCancelable {
  @objc dynamic public func cancelLoading()
}
@objc public protocol SCLMBridgeUIModuleProtocol : AnyObject {
  @objc func hideCloseBtn()
  @objc func hideSystemBtns()
}
@objc public protocol SCLMLocationManagerDelegate : AnyObject {
  @objc optional func locationServicesDisabled(manager: StoryContent.SCLMLocationManager)
  @objc optional func authorizationStatusNoAccess(manager: StoryContent.SCLMLocationManager)
  @objc optional func authorizationStatusAccessGranted(manager: StoryContent.SCLMLocationManager)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMLocationManager : ObjectiveC.NSObject {
  @objc public static var shared: StoryContent.SCLMLocationManager
  @objc public var location: CoreLocation.CLLocation?
  @objc deinit
  @objc public func startUpdatingLocation()
  @objc public func stopUpdatingLocation()
  @discardableResult
  public func checkLocationServices() -> CoreLocation.CLAuthorizationStatus?
  @objc public func locationServicesEnabled() -> Swift.Bool
  public func geocode(coordinate: CoreLocation.CLLocationCoordinate2D, completion: @escaping ((Swift.Result<CoreLocation.CLPlacemark, Swift.Error>)?) -> Swift.Void)
  @objc public func address(for coordinate: CoreLocation.CLLocationCoordinate2D, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc public func address(isForced: Swift.Bool, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc public func addDelegate(_ delegate: StoryContent.SCLMLocationManagerDelegate)
  @objc public func removeDelegate(_ delegate: StoryContent.SCLMLocationManagerDelegate)
  @objc override dynamic public init()
}
extension SCLMLocationManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
extension BridgeMessage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.BridgeMessage>
  @objc @NSManaged dynamic public var command: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var contentId: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var createdDate: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var data: Foundation.Data? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var guid: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var order: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var queue: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var response: Swift.String? {
    @objc get
    @objc set(value)
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PresentationSynchronizingNow : ObjectiveC.NSObject {
  @objc final public let presentationId: Swift.Int
  weak public var contentPackageDownloadRequest: Alamofire.DownloadRequest?
  @objc weak public var contentPackageUnzipProgress: Foundation.Progress?
  @objc public var progress: Foundation.Progress {
    @objc get
    @objc set(value)
  }
  public var progressHandler: ((Swift.Int?, Foundation.Progress) -> Swift.Void)?
  @objc public var objcProgressHandler: ((Foundation.NSNumber?, Foundation.Progress) -> Swift.Void)?
  public var completionHandler: ((Swift.Int?) -> Swift.Void)?
  @objc public var objcCompletionHandler: ((Foundation.NSNumber?) -> Swift.Void)?
  @objc deinit
  @objc override dynamic public init()
}
extension BridgeCustomEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.BridgeCustomEvent>
  @objc @NSManaged dynamic public var contentId: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var createdDate: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var eventId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var eventKey: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var eventValue: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sync: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timeZone: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
}
public enum SCLMBridgeConstants : Swift.String {
  case Handler
  case GetQueue
  case Queue
  case Scheme
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @objcMembers public class SCLMBridge : ObjectiveC.NSObject {
  @objc weak public var delegate: StoryContent.SCLMBridgeProtocol?
  @objc final public let sessions: StoryContent.SCLMBridgeSessions
  @objc public init(presenter: WebKit.WKWebView, presentation: StoryContent.Presentation, delegate: StoryContent.SCLMBridgeProtocol?)
  @objc deinit
  @objc public func handleJavaScriptRequest()
  @objc public func subscribe(module: StoryContent.SCLMBridgeModule, toCommands commands: [Swift.String])
  @objc public func addBridgeModule(_ module: StoryContent.SCLMBridgeModule)
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SCLMBridgeSession : ObjectiveC.NSObject {
  @objc public var sessionId: Swift.String {
    get
  }
  @objc public var deepLinkInboundData: StoryContent.SCLMDeepLinkInboundData? {
    get
  }
  @objc public var deepLinkOutboundData: StoryContent.SCLMDeepLinkOutboundData? {
    get
  }
  @objc public func initDeepLinking(_ deepLink: StoryContent.SCLMDeepLink?)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class SessionSlide : ObjectiveC.NSObject {
  public init(id: Swift.String, name: Swift.String, duration: CoreFoundation.CFTimeInterval, created: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum LogAction : Swift.Int {
  case open
  case close
  case complete
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Client : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Presentation {
  @objc dynamic public convenience init(context: CoreData.NSManagedObjectContext)
  @objc dynamic public class func entityName() -> Swift.String
  @objc dynamic public class func presentationIdProperty() -> Swift.String
  @objc dynamic public func setOpendState()
  @objc dynamic public func setUnopenedState()
  @objc dynamic public func startUpSlide() -> StoryContent.Slide?
  @objc dynamic public func isPresentationNew() -> Swift.Bool
  @objc dynamic public func isOpened() -> Swift.Bool
  @objc dynamic public func isSyncReady() -> Swift.Bool
  @objc dynamic public func isSyncNow() -> Swift.Bool
  @objc dynamic public func isSyncWait() -> Swift.Bool
  public func isSyncDone() -> Swift.Bool
  @objc dynamic public func isUpdateAvailable() -> Swift.Bool
  @objc dynamic public func sourcesFolderUrl() -> Foundation.URL?
  @objc dynamic public func contentSize() -> Swift.Int64
  @objc dynamic public func mediaSize() -> Swift.Int64
  @objc dynamic public func totalSize() -> Swift.Int64
  @objc dynamic public func isContentExists() -> Swift.Bool
  @objc dynamic public func checkMediaFiles(completion: @escaping () -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class URIManager : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc public class SplitQueryItems : ObjectiveC.NSObject {
    @objc deinit
    @objc override dynamic public init()
  }
  @objc public static func buildComponents(raw: Swift.String, singleParameters: [Swift.String]?, queue: [Swift.String : Swift.String]?) -> Foundation.URLComponents?
  @objc public static func splitQueryItems(_ items: [Foundation.URLQueryItem]?) -> StoryContent.URIManager.SplitQueryItems?
  @objc deinit
  @objc override dynamic public init()
}
public struct SCLMToken : Swift.Codable {
  public var access_token: Swift.String?
  public let expires_in: Swift.Int?
  public let token_type: Swift.String?
  public let refresh_token: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @objcMembers public class SCLMObjcToken : ObjectiveC.NSObject {
  @objc public var access_token: Swift.String?
  @objc final public let refresh_token: Swift.String?
  @objc final public let token_type: Swift.String?
  @objc final public let expires_in: Foundation.NSNumber?
  @objc public init(access: Swift.String?, refresh: Swift.String?, tokenType: Swift.String?, expires_in: Foundation.NSNumber?)
  @objc deinit
  @objc override dynamic public init()
}
extension MediaFile {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.MediaFile>
  @objc @NSManaged dynamic public var blobId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var created: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var fileName: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var fileSize: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isAvailableForSharing: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var mediaFileId: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var mimeType: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var revision: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var updatedDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentation: StoryContent.Presentation? {
    @objc get
    @objc set(value)
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMDeepLinkDataStorage : ObjectiveC.NSObject {
  @objc public static var instance: StoryContent.SCLMDeepLinkDataStorage
  @objc deinit
  @objc public func inboundData(id: Swift.String) -> StoryContent.InboundData?
  @objc public func inboundData(sessionId: Swift.String) -> StoryContent.InboundData?
  @objc public func notSynchronizedInboundData(user: StoryContent.User?) -> [StoryContent.InboundData]?
  @objc public func notSynchronizedInboundData() -> [StoryContent.InboundData]?
  @objc public func setInboundDataSynchronized(with dataId: Swift.String?)
  @objc public func outboundData(id: Swift.String) -> StoryContent.OutboundData?
  @objc public func outboundData(sessionId: Swift.String) -> StoryContent.OutboundData?
  @objc public func notSynchronizedOutboundData(user: StoryContent.User?) -> [StoryContent.OutboundData]?
  @objc public func notSynchronizedOutboundData() -> [StoryContent.OutboundData]?
  @objc public func setOutboundDataSynchronized(with dataId: Swift.String?)
  @objc public func saveContext()
}
@_inheritsConvenienceInitializers @objc(BridgeMessage) public class BridgeMessage : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension SessionAction {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.SessionAction>
  @objc @NSManaged dynamic public var created: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var duration: Swift.Int64 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var navigation: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentationId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var slideId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var slideName: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synchronized: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timeZone: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isRestored: Swift.Bool {
    @objc get
    @objc set(value)
  }
}
extension InboundData {
  public func asDict() -> [Swift.String : Any]
  public func parametersList() -> [Swift.String : Swift.String]
}
@objc public protocol SCLMBatchLoadingManagerDelegate : AnyObject {
  @objc var batchCancelable: StoryContent.SCLMBatchCancelable? { get set }
  @objc func batchManagerPrepareForDownloading(_ manager: StoryContent.SCLMBatchCancelable, presentationCount: Swift.Int)
  @objc func batchManagerStartLoading(_ manager: StoryContent.SCLMBatchCancelable, presentation: StoryContent.Presentation)
  @objc func batchManagerProgressChanged(_ manager: StoryContent.SCLMBatchCancelable, progress: Foundation.Progress, for presentation: StoryContent.Presentation)
  @objc func batchManagerTotalProgressChanged(_ manager: StoryContent.SCLMBatchCancelable, progress: Foundation.Progress)
  @objc func batchManagerDidLoadPresentation(_ manager: StoryContent.SCLMBatchCancelable, presentation: StoryContent.Presentation)
  @objc func batchManagerShouldRepeatLoadingPresentation(_ manager: StoryContent.SCLMBatchCancelable, error: Swift.Error, presentation: StoryContent.Presentation) -> Swift.Bool
  @objc func batchManagerFailedLoadingPresentation(_ manager: StoryContent.SCLMBatchCancelable, error: Swift.Error, presentation: StoryContent.Presentation)
  @objc func batchManagerDone(_ manager: StoryContent.SCLMBatchCancelable, isSuccess: Swift.Bool)
}
@objc public enum SCLMErrorType : Swift.Int {
  case cancelled = -999
  case offline = -2000
  case authorization = -3000
  public func description() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMError : Foundation.NSError {
  @objc public class func make(description: Swift.String, reason: Swift.String?) -> StoryContent.SCLMError
  @objc public class func make(code: Swift.Int, description: Swift.String, reason: Swift.String?) -> StoryContent.SCLMError
  @objc public class func make(type: StoryContent.SCLMErrorType) -> StoryContent.SCLMError
  @objc public func isCancelledType() -> Swift.Bool
  @objc public func isOfflineType() -> Swift.Bool
  @objc public func isAuthorizationType() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMBatchLoadingViewController : UIKit.UIViewController {
  @objc public var maximumFailCount: Swift.Int
  @objc public var onDismiss: ((Swift.Bool, [Swift.Int]) -> Swift.Void)?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc public var viewModel: StoryContent.SCLMBatchLoadingViewModel {
    @objc get
    @objc set(newValue)
  }
  @objc public func present(on viewController: UIKit.UIViewController, completion: @escaping (() -> Swift.Void))
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SCLMBatchLoadingViewController : StoryContent.SCLMBatchLoadingManagerDelegate {
  @objc dynamic public var batchCancelable: StoryContent.SCLMBatchCancelable? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public func batchManagerPrepareForDownloading(_ manager: StoryContent.SCLMBatchCancelable, presentationCount: Swift.Int)
  @objc dynamic public func batchManagerStartLoading(_ manager: StoryContent.SCLMBatchCancelable, presentation: StoryContent.Presentation)
  @objc dynamic public func batchManagerProgressChanged(_ manager: StoryContent.SCLMBatchCancelable, progress: Foundation.Progress, for presentation: StoryContent.Presentation)
  @objc dynamic public func batchManagerTotalProgressChanged(_ manager: StoryContent.SCLMBatchCancelable, progress: Foundation.Progress)
  @objc dynamic public func batchManagerDidLoadPresentation(_ manager: StoryContent.SCLMBatchCancelable, presentation: StoryContent.Presentation)
  @objc dynamic public func batchManagerShouldRepeatLoadingPresentation(_ manager: StoryContent.SCLMBatchCancelable, error: Swift.Error, presentation: StoryContent.Presentation) -> Swift.Bool
  @objc dynamic public func batchManagerFailedLoadingPresentation(_ manager: StoryContent.SCLMBatchCancelable, error: Swift.Error, presentation: StoryContent.Presentation)
  @objc dynamic public func batchManagerDone(_ manager: StoryContent.SCLMBatchCancelable, isSuccess: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class SCLMBridgeResponse : ObjectiveC.NSObject {
  public struct Status {
    public static var success: StoryContent.SCLMBridgeResponse.Status
    public static var failure: StoryContent.SCLMBridgeResponse.Status
  }
  public convenience init(guid: Swift.String, responseData: Any?, status: StoryContent.SCLMBridgeResponse.Status, errorMessage: Swift.String?)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol SCLMBridgeCustomEventsModuleProtocol : AnyObject {
  @objc func setEventKey(_ key: Swift.String, and value: Any)
}
@_inheritsConvenienceInitializers @objc(InboundDataParameter) public class InboundDataParameter : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@_inheritsConvenienceInitializers @objc(SessionAction) public class SessionAction : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Presentation {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.Presentation>
  @objc @NSManaged dynamic public var created: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var debugModeEnabled: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var imgId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isNew: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longDescription: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var map: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var mapEnabled: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var mapType: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var needConfirmation: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var opened: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var openedDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var order: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentationId: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var previewMode: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var rawData: Foundation.NSData? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var revision: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var shortdescription: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var skip: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var syncState: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var thumbImgId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var updatedDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var visibility: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var client: StoryContent.Client? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var contentPackage: StoryContent.ContentPackage? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var mediaFiles: Swift.Set<StoryContent.MediaFile>? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var slides: Swift.Set<StoryContent.Slide>? {
    @objc get
    @objc set(value)
  }
}
extension Presentation {
  @objc(addMediaFilesObject:) @NSManaged dynamic public func addToMediaFiles(_ value: StoryContent.MediaFile)
  @objc(removeMediaFilesObject:) @NSManaged dynamic public func removeFromMediaFiles(_ value: StoryContent.MediaFile)
  @objc(addMediaFiles:) @NSManaged dynamic public func addToMediaFiles(_ values: Foundation.NSSet)
  @objc(removeMediaFiles:) @NSManaged dynamic public func removeFromMediaFiles(_ values: Foundation.NSSet)
}
extension Presentation {
  @objc(addSlidesObject:) @NSManaged dynamic public func addToSlides(_ value: StoryContent.Slide)
  @objc(removeSlidesObject:) @NSManaged dynamic public func removeFromSlides(_ value: StoryContent.Slide)
  @objc(addSlides:) @NSManaged dynamic public func addToSlides(_ values: Foundation.NSSet)
  @objc(removeSlides:) @NSManaged dynamic public func removeFromSlides(_ values: Foundation.NSSet)
}
@objc @objcMembers final public class SCLMUser : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String?
  @objc final public let password: Swift.String?
  @objc final public let username: Swift.String?
  @objc final public let email: Swift.String?
  @objc final public let phone: Swift.String?
  @objc final public let name: Swift.String?
  @objc final public let location: Swift.String?
  @objc final public let birthDate: Swift.String?
  final public let gender: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  @objc override dynamic public init()
  final public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MediaFileDownloadingNow : ObjectiveC.NSObject {
  @objc public var mediaFileId: Foundation.NSNumber {
    get
  }
  @objc public var presentationId: Foundation.NSNumber {
    get
  }
  weak public var downloadRequest: Alamofire.DownloadRequest?
  @objc public var progress: Foundation.Progress {
    @objc get
    @objc set(value)
  }
  @objc public var progressHandler: ((Foundation.Progress) -> Swift.Void)?
  @objc public var completionHandler: (() -> Swift.Void)?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SCLMDeepLinkOutboundData : ObjectiveC.NSObject {
  @objc final public let sessionId: Swift.String?
  @objc public var scheme: Swift.String? {
    get
  }
  @objc public var params: [Swift.String : Swift.String] {
    get
  }
  @objc public func resultString() -> Swift.String?
  @objc public func resultURL() -> Foundation.URL?
  @objc deinit
  @objc override dynamic public init()
}
@objc extension SCLMDeepLinkOutboundData {
  @objc dynamic public func asDictionary() -> [Swift.String : Any]
}
@objc extension SCLMDeepLinkOutboundData {
  @objc public static func tryToCreateScheme(_ scheme: Swift.String?) -> Swift.String?
}
@_inheritsConvenienceInitializers @objc(BridgeSession) public class BridgeSession : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc public enum SLWebViewNavigationType : Swift.Int {
  case linkCliked
  case formSubmitted
  case backForward
  case reload
  case formresubmitted
  case other
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SCLMWebViewProtocol : AnyObject {
  @objc func webViewDidStartLoad(webView: StoryContent.SCLMWebView)
  @objc func webViewDidFinishLoad(webView: StoryContent.SCLMWebView)
  @objc func webView(_ webView: StoryContent.SCLMWebView, didFailLoadWith error: Foundation.NSError)
  @objc func webView(_ webView: StoryContent.SCLMWebView, shouldStartLoadWith request: Foundation.NSURLRequest, navigationType: StoryContent.SLWebViewNavigationType) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class SCLMWebView : WebKit.WKWebView, WebKit.WKNavigationDelegate {
  @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMBridgeMessage : ObjectiveC.NSObject {
  @objc public var guid: Swift.String {
    get
  }
  @objc public var command: Swift.String {
    get
  }
  @objc public var data: Any {
    get
  }
  @objc public var response: Swift.String {
    get
  }
  @objc public var processingCounter: Swift.Int {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum SCLMBridgeMessageCommand : Swift.String {
  case setCustomEvent
  case getCustomEventByKey
  case deleteCustomEventByKey
  case getCustomEventsObject
  case getMediaFiles
  case openMediaFile
  case openMediaLibrary
  case hideMediaLibraryBtn
  case showMediaLibraryBtn
  case onMediaFilesControllerOpen
  case onMediaFilesControllerClosed
  case getSessions
  case getCurrentSessions
  case setSessionComplete
  case go
  case getNavigationData
  case getAppInfo
  case getUserInfo
  case getGeoLocationInfo
  case open
  case closePresentation
  case getPresentationInfo
  case getPreviousSlide
  case getNextSlide
  case getBackForwardList
  case getPresentations
  case getBackForwardPresList
  case getCurrentSlideName
  case hideCloseBtn
  case hideSystemBtns
  case httpget
  case httppost
  case httpput
  case httpdelete
  case getMap
  case hideMapBtn
  case showMapBtn
  case getDeepLinkingInboundData
  case getDeepLinkingOutboundData
  case setDeepLinkingOutboundScheme
  case setDeepLinkingOutboundParameter
  case getDeepLinkingOutboundParameter
  case deleteDeepLinkingOutboundParameter
  public func stringValue() -> Swift.String
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(BridgeCustomEvent) public class BridgeCustomEvent : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Slide {
  @objc dynamic public convenience init(context: CoreData.NSManagedObjectContext)
  @objc dynamic public class func entityName() -> Swift.String
  @objc dynamic public class func slideIdPopertyName() -> Swift.String
  @objc dynamic public func checkThumbImageExists() -> Swift.Bool
  @objc dynamic public func checkHtmlExists() -> Swift.Bool
  @objc dynamic public func isFileNotEmptyAtUrl(_ url: Foundation.URL) -> Swift.Bool
  @objc dynamic public func getThumbImageUrl() -> Foundation.URL?
  @objc dynamic public func getPreviewImageUrl() -> Foundation.URL?
  @objc dynamic public func createdString() -> Swift.String
}
@objc public protocol SCLMBridgeMapModuleProtocol : AnyObject {
  @objc func hideMapBtn()
  @objc func showMapBtn()
}
@_inheritsConvenienceInitializers @objc(OutboundDataParameter) public class OutboundDataParameter : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@_inheritsConvenienceInitializers @objc(SessionEventAction) public class SessionEventAction : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMSyncManager : ObjectiveC.NSObject {
  @objc public static var shared: StoryContent.SCLMSyncManager
  @objc public var context: CoreData.NSManagedObjectContext {
    @objc get
  }
  @objc public var fetchedResultsController: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult> {
    @objc get
    @objc set(value)
  }
  @objc public var fetchedResultsControllerSectionLess: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult> {
    @objc get
    @objc set(value)
  }
  @objc public var fetchedResultsControllerInvisible: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult> {
    @objc get
    @objc set(value)
  }
  @objc public func synchronizeClients(completionHandler: @escaping (StoryContent.SCLMError?) -> Swift.Void)
  @objc public func synchronizePresentation(_ presentation: StoryContent.Presentation, completionHandler: @escaping (Swift.Error?) -> Swift.Void, progressHandler: @escaping (Foundation.Progress) -> Swift.Void, psnHandler: ((StoryContent.PresentationSynchronizingNow) -> Swift.Void)?)
  @objc public func deletePresentationContentPackage(_ presentation: StoryContent.Presentation)
  @objc public func updatePresentation(_ presentation: StoryContent.Presentation, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  @objc public func cancelSynchronizePresentation(with id: Foundation.NSNumber)
  @objc public func cancelSynchronizePresentation(_ presentation: StoryContent.Presentation)
  @objc public func resetContent(completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func resetContent(isIgnoreInternetReachable: Swift.Bool = false, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func getUser() -> StoryContent.User?
  @objc public func getClients() -> [StoryContent.Client]?
  @objc public func getClient(withId id: Swift.Int) -> StoryContent.Client?
  @objc public func getPresentation(withId id: Swift.Int) -> StoryContent.Presentation?
  @objc public func getPresentation(withName name: Swift.String) -> StoryContent.Presentation?
  @objc public func getSlide(withId id: Swift.Int32) -> StoryContent.Slide?
  @objc public func getSlide(withName name: Swift.String) -> StoryContent.Slide?
  @objc public func saveContext()
  @objc public func isPresentationSynchronizingNow(presentation: StoryContent.Presentation) -> StoryContent.PresentationSynchronizingNow?
  @objc public func isPresentationSynchronizingNow(id: Foundation.NSNumber) -> StoryContent.PresentationSynchronizingNow?
  @objc public func isPresentationSynchronizingNowWithThumbsCreation() -> Swift.Bool
  @objc public func resetAllOpenedState()
  @objc public func isMediaFileDownloadingNow(mediaFileId: Foundation.NSNumber?, presentationId: Foundation.NSNumber?) -> StoryContent.MediaFileDownloadingNow?
  @objc deinit
}
@objc public enum ClosePresentationMode : Swift.Int {
  case closeDefault
  case closeSessionComplete
  case closeSessionTest
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SCLMBridgePresentationModuleProtocol : AnyObject {
  typealias SlideName = Swift.String
  @objc func openPresentation(_ presentation: StoryContent.Presentation, with slideName: Swift.String?, and data: Any?)
  @objc func getPreviousSlide() -> StoryContent.Slide?
  @objc func getNextSlide() -> StoryContent.Slide?
  @objc func getCurrentSlideName() -> Swift.String?
  @objc func getBackForwardList() -> [Self.SlideName]?
  @objc func getBackForwardPresList() -> [StoryContent.Presentation]?
  @objc func closePresentation(mode: StoryContent.ClosePresentationMode)
}
@objc @_inheritsConvenienceInitializers public class Presentation : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc open class SCLMBridgeModule : ObjectiveC.NSObject {
  public init(presenter: WebKit.WKWebView, session: StoryContent.SCLMBridgeSession, presentation: StoryContent.Presentation, settings: Any?, environments: Any?, delegate: StoryContent.SCLMBridgeProtocol?)
  @objc deinit
  open func execute(message: StoryContent.SCLMBridgeMessage, result: @escaping (StoryContent.SCLMBridgeResponse?) -> Swift.Void)
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMSyncService : ObjectiveC.NSObject {
  @objc public static var shared: StoryContent.SCLMSyncService
  @objc public func setApiEndpoint(_ endPoint: Swift.String)
  @objc public func setTimeoutInterval(_ timeoutInterval: Foundation.TimeInterval)
  @objc public func checkUserExists(userName: Swift.String, success: @escaping (StoryContent.SCLMUser) -> Swift.Void, failure: @escaping (Swift.Error) -> Swift.Void)
  @objc public func objcCheckUserExists(userName: Swift.String, success: @escaping (StoryContent.SCLMUser) -> Swift.Void, failure: @escaping (Foundation.NSError) -> Swift.Void)
  @objc deinit
}
extension OutboundData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.OutboundData>
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var modelId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var scheme: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synchronized: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timeZone: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var created: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isRestored: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var parameters: Foundation.NSSet? {
    @objc get
    @objc set(value)
  }
}
extension OutboundData {
  @objc(addParametersObject:) @NSManaged dynamic public func addToParameters(_ value: StoryContent.OutboundDataParameter)
  @objc(removeParametersObject:) @NSManaged dynamic public func removeFromParameters(_ value: StoryContent.OutboundDataParameter)
  @objc(addParameters:) @NSManaged dynamic public func addToParameters(_ values: Foundation.NSSet)
  @objc(removeParameters:) @NSManaged dynamic public func removeFromParameters(_ values: Foundation.NSSet)
}
@objc public enum SessionState : Swift.Int {
  case isInProcess = 0
  case isComplete = 1
  case isTest = 2
  case isLeaveViaJs = 3
  case isLeaveViaDeepLink = 4
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SCLMBridgeSessions : ObjectiveC.NSObject {
  @objc public var session: StoryContent.SCLMBridgeSession {
    get
  }
  @objc public var isOutboundDataWithSessionInfo: Swift.Bool
  @available(*, deprecated, renamed: "unfinishedSession")
  public func isUnfinishedSessionExist() -> (isExist: Swift.Bool, session: StoryContent.SCLMBridgeSession?)
  @objc public func unfinishedSession() -> StoryContent.SCLMBridgeSession?
  @objc public func addNewSession()
  @objc public func createNewSession(forPresentation presentation: StoryContent.Presentation)
  @objc public func restoreUnfinishedSession()
  @objc public func updateStateForCurrentSession(state: StoryContent.SessionState)
  @objc @available(*, deprecated, renamed: "updateStateForSession(session:state:)")
  public func updateStateForSession(withSessionId sessionId: Swift.String, state: StoryContent.SessionState)
  @objc public func updateStateForSession(session: StoryContent.SCLMBridgeSession, state: StoryContent.SessionState)
  @objc public func closeSession(action: StoryContent.LogAction, state: StoryContent.SessionState)
  @objc public func setSessionComplete()
  @objc public func deleteCurrentSession()
  @objc public func incrementSlidesCountForCurrentSession()
  @objc public func updateSlidesForCurrentSession(withSlide slide: StoryContent.Slide, duration: CoreFoundation.CFTimeInterval)
  public func lastOpenedSlideId() -> Swift.Int32?
  @objc public func logAction(_ action: StoryContent.LogAction, presentation: StoryContent.Presentation)
  @objc public func logAction(_ action: StoryContent.LogAction, slide: StoryContent.Slide, duration: CoreFoundation.CFTimeInterval, navigationMethod: Swift.String)
  @objc public func logAction(_ action: StoryContent.LogAction, mediaFile: StoryContent.MediaFile, duration: Swift.Int64)
  @objc public func logEventKey(_ key: Swift.String, value: Any, presentation: StoryContent.Presentation)
  public func updateLastOpenedSlideId(_ slideId: Swift.Int32?)
  @objc deinit
  @objc override dynamic public init()
}
extension SCLMBridgeSessions {
  @objc dynamic public func updateOutboundDataWithSessionInfo()
  @objc dynamic public func markDeeplinkDataAsSyncable()
}
@_inheritsConvenienceInitializers @objc(OutboundData) public class OutboundData : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc public protocol SCLMBridgeMediaFilesModuleProtocol : AnyObject {
  @objc func openMediaFile(_ fileName: Swift.String)
  @objc func openMediaLibrary()
  @objc func showMediaLibraryBtn()
  @objc func hideMediaLibraryBtn()
}
extension InboundDataParameter {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.InboundDataParameter>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var parentData: StoryContent.InboundData? {
    @objc get
    @objc set(value)
  }
}
extension SessionEventAction {
  @objc dynamic public func asDict() -> [Swift.String : Any]
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMCoreDataManager : ObjectiveC.NSObject {
  @objc public static var shared: StoryContent.SCLMCoreDataManager
  @objc public func user() -> StoryContent.User?
  @objc public func saveContext()
  @objc override dynamic public init()
  @objc deinit
}
extension ContentPackage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.ContentPackage>
  @objc @NSManaged dynamic public var blobId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var contentPackageId: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var created: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var fileSize: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var mimeType: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var revision: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var updatedDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentation: StoryContent.Presentation? {
    @objc get
    @objc set(value)
  }
}
extension Slide {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.Slide>
  @objc @NSManaged dynamic public var created: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var linkedSlides: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var pageSource: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var revision: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var slideId: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var swipeNext: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var swipePrevious: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var updatedDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentation: StoryContent.Presentation? {
    @objc get
    @objc set(value)
  }
}
extension SessionAction {
  @objc dynamic public func asDict() -> [Swift.String : Any]
}
extension OutboundData {
  public func asDict() -> [Swift.String : Any]
  public func parametersList() -> [Swift.String : Swift.String]
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMBridgeStorage : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
  @objc public func findNotSynchronizedSessions(user: StoryContent.User? = nil) -> [StoryContent.BridgeSession]?
  @objc public func findFinishedNotSynchronizedSessions(user: StoryContent.User?) -> [StoryContent.BridgeSession]?
  @objc public func findFinishedNotSynchronizedSessions() -> [StoryContent.BridgeSession]?
  @objc public func findNotSynchronizedSessions() -> [StoryContent.BridgeSession]?
  @objc public func findNotSynchronizedSessionActions(user: StoryContent.User?) -> [StoryContent.SessionAction]?
  @objc public func findNotSynchronizedSessionActions() -> [StoryContent.SessionAction]?
  @objc public func findNotSynchronizedSessionEventActions(user: StoryContent.User?) -> [StoryContent.SessionEventAction]?
  @objc public func findNotSynchronizedSessionEventActions() -> [StoryContent.SessionEventAction]?
  @objc public func setSessionAddress(withSessionId sessionId: Swift.String, address: Swift.String?)
  @objc public func setSessionSynchronized(withSessionId sessionId: Swift.String)
  @objc public func setSessionSynchronized(status: Swift.Bool, sessionId: Swift.String)
  @objc public func setSessionsSynchronized(ids: [Swift.String], status: Swift.Bool)
  @objc public func setSessionActionSynchronized(withSessionActionId id: Swift.String)
  @objc public func setSessionActionsSynchronized(ids: [Swift.String])
  @objc public func setSessionEventActionSynchronized(withSessionEventActionId id: Swift.String)
  @objc public func setSessionEventActionsSynchronized(ids: [Swift.String])
  @objc public func saveContext()
}
@objc public protocol SCLMBridgeBaseModuleProtocol : AnyObject {
  @objc func goToSlide(_ slide: StoryContent.Slide, with data: Any)
  @objc func getNavigationData() -> Any
}
public class TreeNode<T> {
  public var value: T
  weak public var parent: StoryContent.TreeNode<T>?
  public var children: [StoryContent.TreeNode<T>]
  public init(value: T)
  public func addChild(_ node: StoryContent.TreeNode<T>)
  @objc deinit
}
extension TreeNode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TreeNode where T : Swift.Equatable {
  public func search(_ value: T) -> StoryContent.TreeNode<T>?
}
extension OutboundDataParameter {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.OutboundDataParameter>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var parentData: StoryContent.OutboundData? {
    @objc get
    @objc set(value)
  }
}
extension InboundData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.InboundData>
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var modelId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synchronized: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var uri: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timeZone: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var created: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isRestored: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var parameters: Foundation.NSSet? {
    @objc get
    @objc set(value)
  }
}
extension InboundData {
  @objc(addParametersObject:) @NSManaged dynamic public func addToParameters(_ value: StoryContent.InboundDataParameter)
  @objc(removeParametersObject:) @NSManaged dynamic public func removeFromParameters(_ value: StoryContent.InboundDataParameter)
  @objc(addParameters:) @NSManaged dynamic public func addToParameters(_ values: Foundation.NSSet)
  @objc(removeParameters:) @NSManaged dynamic public func removeFromParameters(_ values: Foundation.NSSet)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMBatchLoaderView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension SCLMBatchLoaderView : StoryContent.SCLMBatchLoadable {
  @objc dynamic public var preferredSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc dynamic public func startLoading()
  @objc dynamic public func stopLoading()
}
@_inheritsConvenienceInitializers @objc(InboundData) public class InboundData : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc public protocol SCLMBridgeSessionsModuleProtocol : AnyObject {
  @objc func setSessionComplete()
}
@objc public protocol SCLMBatchLoadable {
  @objc var preferredSize: CoreGraphics.CGSize { get }
  @objc func startLoading()
  @objc func stopLoading()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMBatchLoadingViewModel : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc public class LabelViewModel : ObjectiveC.NSObject {
    @objc public var text: Swift.String?
    @objc public var textColor: UIKit.UIColor?
    @objc public var alignment: UIKit.NSTextAlignment
    @objc public var kern: CoreGraphics.CGFloat
    @objc public var lineHeight: CoreGraphics.CGFloat
    @objc public var font: UIKit.UIFont?
    @objc public var numberOfLines: Swift.Int
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class ButtonViewModel : ObjectiveC.NSObject {
    @objc public var text: Swift.String?
    @objc public var normalColor: UIKit.UIColor?
    @objc public var highlightedColor: UIKit.UIColor?
    @objc public var isHidden: Swift.Bool
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var loader: (UIKit.UIView & StoryContent.SCLMBatchLoadable)?
  @objc public var backgroundColor: UIKit.UIColor?
  @objc public var loaderColor: UIKit.UIColor
  @objc public var isShowLoadingLabel: Swift.Bool
  @objc public var titleViewModel: StoryContent.SCLMBatchLoadingViewModel.LabelViewModel
  @objc public var subtitleViewModel: StoryContent.SCLMBatchLoadingViewModel.LabelViewModel
  @objc public var progressViewModel: StoryContent.SCLMBatchLoadingViewModel.LabelViewModel
  @objc public var currentLoadingViewModel: StoryContent.SCLMBatchLoadingViewModel.LabelViewModel
  @objc public var cancelButtonViewModel: StoryContent.SCLMBatchLoadingViewModel.ButtonViewModel
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SCLMBatchLoadingView : UIKit.UIView {
  @objc public var loader: (UIKit.UIView & StoryContent.SCLMBatchLoadable)?
  @objc final public let closeButton: UIKit.UIButton
  @objc public var viewModel: StoryContent.SCLMBatchLoadingViewModel {
    @objc get
    @objc set(value)
  }
  @objc override dynamic public func layoutSubviews()
  @objc public func increaseProgressText()
  @objc public func setProgress(current: Swift.Int, total: Swift.Int)
  @objc public func updateProgressText()
  @objc public func setProgressText(_ text: Swift.String?)
  @objc public func setLoadingText(_ text: Swift.String?)
  @objc public func updateAppearance()
  @objc public func updateLabelAppearance()
  @objc deinit
}
@objc public class SCLMDeepLink : ObjectiveC.NSObject {
  public var url: Swift.String?
  public var source: Swift.String?
  public var contentId: Swift.Int?
  public var contentName: Swift.String?
  public var slide: Swift.String?
  public var sessionId: Swift.String?
  public var userId: Swift.String?
  public var signature: Swift.String?
  public var callback: Swift.String?
  public var params: [Swift.String : Swift.String]?
  public init(url: Swift.String, source: Swift.String?, params: [Swift.String : Swift.String])
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMBatchLoadingManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func addBatchLoadable(_ loadingDelegate: StoryContent.SCLMBatchLoadingManagerDelegate)
  @objc public func addPresentations(_ presentations: [StoryContent.Presentation])
  @objc public func startLoading()
  @objc deinit
}
extension SCLMBatchLoadingManager : StoryContent.SCLMBatchCancelable {
  @objc dynamic public func cancelLoading()
}
extension BridgeSession {
  @objc dynamic public func asDict() -> [Swift.String : Any]
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SCLMDateFormatter : ObjectiveC.NSObject {
  @objc public static func serverTimeString(from date: Foundation.Date?) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol SCLMBridgeProtocol : AnyObject {
}
@objc @_inheritsConvenienceInitializers public class User : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Client {
  @objc dynamic public func getThumbImage() -> UIKit.UIImage?
}
extension ContentPackage {
  @objc dynamic public class func entityName() -> Swift.String
  @objc dynamic public class func contentPackageIdPopertyName() -> Swift.String
  @objc dynamic public func isDownloadCanBeResumed() -> Swift.Bool
}
extension User {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.User>
  @objc @NSManaged dynamic public var birthDate: Foundation.NSDate? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var code: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var email: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var gender: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var fullName: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var phoneNumber: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
}
@objc @_inheritsConvenienceInitializers public class MediaFile : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
@objc public enum MediaFileMIMEType : Swift.Int {
  case audioVideo
  case PDF
  case other
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension MediaFile {
  @objc dynamic public func loadMediaFile(completionHandler: @escaping (Swift.Error?) -> Swift.Void, progressHandler: @escaping (Foundation.Progress) -> Swift.Void)
  @objc dynamic public func MIMEType() -> StoryContent.MediaFileMIMEType
  @objc dynamic public func sourcesFolderUrl() -> Foundation.URL?
  @objc dynamic public func mediaFileUrl() -> Foundation.URL?
  @objc dynamic public func isMediaFileExists() -> Swift.Bool
  @objc dynamic public func thumbnail() -> UIKit.UIImage?
  @objc dynamic public func thumbnailImage(url: Foundation.URL) -> UIKit.UIImage?
  @objc dynamic public func thumbnailPdf(url: Foundation.URL, width: CoreGraphics.CGFloat = 240) -> UIKit.UIImage?
}
extension BridgeSession {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StoryContent.BridgeSession>
  @objc @NSManaged dynamic public var address: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var complete: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var completeSessionDuration: Swift.Int64 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var created: Foundation.Date? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var duration: Swift.Int64 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var lastOpenedSlideId: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var presentationId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var slidesCount: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synchronized: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timeZone: Swift.Int32 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var isRestored: Swift.Bool {
    @objc get
    @objc set(value)
  }
}
